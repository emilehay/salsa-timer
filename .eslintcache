[{"/Users/emilehay/Documents/code/personal/salsa-timer/src/index.js":"1","/Users/emilehay/Documents/code/personal/salsa-timer/src/App.js":"2","/Users/emilehay/Documents/code/personal/salsa-timer/src/components/Navbar/Navbar.js":"3","/Users/emilehay/Documents/code/personal/salsa-timer/src/components/Timer/Timer.js":"4","/Users/emilehay/Documents/code/personal/salsa-timer/src/components/Button-group/Button-group.js":"5","/Users/emilehay/Documents/code/personal/salsa-timer/src/components/Options-popup/Options-popup.js":"6","/Users/emilehay/Documents/code/personal/salsa-timer/src/components/Progress-summary/Progress-summary.js":"7"},{"size":197,"mtime":1608023094370,"results":"8","hashOfConfig":"9"},{"size":2632,"mtime":1608271170808,"results":"10","hashOfConfig":"9"},{"size":505,"mtime":1608142088262,"results":"11","hashOfConfig":"9"},{"size":1717,"mtime":1608279243700,"results":"12","hashOfConfig":"9"},{"size":599,"mtime":1608134434518,"results":"13","hashOfConfig":"9"},{"size":1290,"mtime":1608134369255,"results":"14","hashOfConfig":"9"},{"size":562,"mtime":1608149509433,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"23qc40",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"/Users/emilehay/Documents/code/personal/salsa-timer/src/index.js",[],["34","35"],"/Users/emilehay/Documents/code/personal/salsa-timer/src/App.js",["36"],"import React, { useState, useEffect } from 'react'\nimport './App.scss'\nimport Navbar from './components/Navbar/Navbar'\nimport OptionsPopup from './components/Options-popup/Options-popup'\nimport ProgressSummary from './components/Progress-summary/Progress-summary'\nimport Timer from './components/Timer/Timer'\n\nfunction App() {\n\n  const [activeTimer, setActiveTimer] = useState(0)\n  const [timerTimes, setTimerTimes] = useState([25, 5, 15])\n  const [pomodoroIndex, setPomodoroIndex] = useState(0)\n  const [pomodoroOrder, setPomodoroOrder] = useState([0, 1, 0, 1, 0, 1, 0, 2])\n  const [optionsPopupOpen, setOptionsPopupOpen] = useState(false)\n  const [completedCount, setCompletedCount] = useState(0);\n  const [progressPercentage, setProgressPercentage] = useState(0);\n\n  useEffect(() => {\n    setActiveTimer(pomodoroOrder[pomodoroIndex]);\n    setProgressPercentage((pomodoroIndex / pomodoroOrder.length) * 100);\n  }, [pomodoroOrder, pomodoroIndex])\n\n  const goToNextTimer = () => {\n    if(pomodoroIndex < pomodoroOrder.length - 1){\n      setPomodoroIndex(pomodoroIndex + 1)\n    } else {\n      setCompletedCount(completedCount + 1);\n      setProgressPercentage(100);\n      setTimeout(() => {\n        setPomodoroIndex(0);\n      }, 1000);\n    }\n  }\n\n  const manuallySetActiveTimer = (selectedTimer) => {\n    \n    let found = false;\n\n    for(var i = pomodoroIndex; i < pomodoroOrder.length; i++){\n      if(pomodoroOrder[i] === selectedTimer){\n        found = true;\n        setPomodoroIndex(i);\n        break;\n      }\n    }\n\n    if(found === false){\n      for(var j = 0; j < pomodoroIndex; j++){\n        if(pomodoroOrder[j] === selectedTimer){\n          setPomodoroIndex(j);\n          setCompletedCount(completedCount + 1);\n          break;\n        }\n      }\n    }\n  }\n\n  const resetProgress = () => {\n    setActiveTimer(0);\n    setPomodoroIndex(0);\n    setCompletedCount(0);\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar\n        activeTimer={activeTimer}\n        clickOptionsButton={() => { setOptionsPopupOpen(true) }}\n        manuallySetActiveTimer={manuallySetActiveTimer}\n      />\n      <OptionsPopup\n        clickOffPopup={() => { setOptionsPopupOpen(false) }}\n        optionsPopupOpen={optionsPopupOpen}\n        setTimerTimes={setTimerTimes}\n        timerTimes={timerTimes}\n      />\n      <Timer\n        activeTimer={activeTimer}\n        goToNextTimer={goToNextTimer}\n        timerMinutes={timerTimes[activeTimer]}\n      />\n      <ProgressSummary\n        completedCount={completedCount}\n        progressPercentage={progressPercentage}\n        resetProgress={resetProgress}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/emilehay/Documents/code/personal/salsa-timer/src/components/Navbar/Navbar.js",[],"/Users/emilehay/Documents/code/personal/salsa-timer/src/components/Timer/Timer.js",[],"/Users/emilehay/Documents/code/personal/salsa-timer/src/components/Button-group/Button-group.js",["37"],"import React, { useState } from 'react'\nimport './Button-group.scss';\n\nconst ButtonGroup = ({ activeTimer, manuallySetActiveTimer }) => {\n\n  const [timerItems, setTimerItems] = useState([\"Pomodoro\", \"Short rest\", \"Long rest\"]);\n\n  return (\n    <div className=\"button-group\">\n      {\n        timerItems.map((timerItem, index) => (\n          <button\n            className={index === activeTimer ? 'active' : undefined}\n            key={index}\n            onClick={() => { manuallySetActiveTimer(index) }}\n          >{timerItem}</button>\n        ))\n      }\n    </div>\n  )\n}\n\nexport default ButtonGroup\n","/Users/emilehay/Documents/code/personal/salsa-timer/src/components/Options-popup/Options-popup.js",[],"/Users/emilehay/Documents/code/personal/salsa-timer/src/components/Progress-summary/Progress-summary.js",["38"],"import React, { useState } from 'react'\nimport './Progress-summary.scss';\n\nconst ProgressSummary = ({ completedCount, progressPercentage, resetProgress }) => {\n\n  return (\n    <div class=\"progress-summary\">\n      <div class=\"progress-bar-wrapper\">\n        <span class=\"progress-bar\" style={{ width: `${progressPercentage}%` }}></span>\n      </div>\n      <div class=\"progress-count\">{completedCount}</div>\n      <button className=\"reset-button\" onClick={resetProgress}><i className=\"fas fa-undo-alt\"></i></button>\n    </div>\n  )\n}\n\nexport default ProgressSummary\n",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":13,"column":25,"nodeType":"45","messageId":"46","endLine":13,"endColumn":41},{"ruleId":"43","severity":1,"message":"47","line":6,"column":22,"nodeType":"45","messageId":"46","endLine":6,"endColumn":35},{"ruleId":"43","severity":1,"message":"48","line":1,"column":17,"nodeType":"45","messageId":"46","endLine":1,"endColumn":25},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'setPomodoroOrder' is assigned a value but never used.","Identifier","unusedVar","'setTimerItems' is assigned a value but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]